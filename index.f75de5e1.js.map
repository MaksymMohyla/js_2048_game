{"mappings":"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","sources":["src/scripts/main.js"],"sourcesContent":["'use strict';\n\nconst gameTable = document.querySelector('.game-field');\n\n/* змінна для перевірки кінця гри,\nякщо гра програна, керування в обробнику подій блокується */\nlet isGameOver = false;\n\nclass Game {\n  constructor(initialState) {\n    this.initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n  }\n\n  moveLeft() {\n    /* перед кожним рухом робим копію попереднього стану, щоб\n    в методі compareStates() порівнювати їх і не додавати нову плитку\n    якщо рух в даному напрямку неможливий */\n    const previousState = JSON.parse(JSON.stringify(this.state));\n\n    for (let row = 0; row < 4; row++) {\n      let col = 0;\n\n      // ітеруємо по всіх рядках зліва направо\n      for (let i = 1; i < 4; i++) {\n        // якщо зустрічаєм непусту клітинку\n        if (this.state[row][i] !== 0) {\n          for (let j = i; j > col; j--) {\n            // і якщо наступна пуста\n            if (this.state[row][j - 1] === 0) {\n              // переміщуєм її туди\n              this.state[row][j - 1] = this.state[row][j];\n              // попередня стає пуста\n              this.state[row][j] = 0;\n              // якщо натикаємось на таку саму\n            } else if (this.state[row][j - 1] === this.state[row][j]) {\n              // наступна клітинка стає х2, а попередня пустою\n              this.state[row][j - 1] *= 2;\n              this.state[row][j] = 0;\n              // оновлення очок на значення злитої клітинки.\n              this.score += this.state[row][j - 1];\n              // використовується для відстеження останньої непустої клітинки\n              col = j;\n              break;\n            } else {\n              col = j - 1;\n              break;\n            }\n          }\n        }\n      }\n    }\n    this.updateHTML();\n\n    if (!this.compareStates(previousState, this.state)) {\n      this.addRandomTile();\n    }\n    this.updateScore();\n\n    // перевірка на перемогу чи поразку в кінці кожного ходу\n    switch (this.getStatus()) {\n      case 'lose':\n        this.gameOver();\n        break;\n      case 'win':\n        document.querySelector('.message-win').classList.remove('hidden');\n        break;\n    }\n  }\n\n  moveRight() {\n    const previousState = JSON.parse(JSON.stringify(this.state));\n\n    for (let row = 0; row < 4; row++) {\n      let col = 3;\n\n      // тепер ітерація справа наліво\n      for (let i = 2; i >= 0; i--) {\n        if (this.state[row][i] !== 0) {\n          for (let j = i; j < col; j++) {\n            if (this.state[row][j + 1] === 0) {\n              this.state[row][j + 1] = this.state[row][j];\n              this.state[row][j] = 0;\n            } else if (this.state[row][j + 1] === this.state[row][j]) {\n              this.state[row][j + 1] *= 2;\n              this.state[row][j] = 0;\n              this.score += this.state[row][j + 1];\n              col = j;\n              break;\n            } else {\n              col = j + 1;\n              break;\n            }\n          }\n        }\n      }\n    }\n    this.updateHTML();\n\n    if (!this.compareStates(previousState, this.state)) {\n      this.addRandomTile();\n    }\n    this.updateScore();\n\n    switch (this.getStatus()) {\n      case 'lose':\n        this.gameOver();\n        break;\n      case 'win':\n        document.querySelector('.message-win').classList.remove('hidden');\n        break;\n    }\n  }\n\n  moveUp() {\n    const previousState = JSON.parse(JSON.stringify(this.state));\n\n    for (let col = 0; col < 4; col++) {\n      let row = 0;\n\n      // ітерація по колонках\n      for (let i = 1; i < 4; i++) {\n        if (this.state[i][col] !== 0) {\n          for (let j = i; j > row; j--) {\n            if (this.state[j - 1][col] === 0) {\n              this.state[j - 1][col] = this.state[j][col];\n              this.state[j][col] = 0;\n            } else if (this.state[j - 1][col] === this.state[j][col]) {\n              this.state[j - 1][col] *= 2;\n              this.state[j][col] = 0;\n              this.score += this.state[j - 1][col];\n              row = j;\n              break;\n            } else {\n              row = j - 1;\n              break;\n            }\n          }\n        }\n      }\n    }\n    this.updateHTML();\n\n    if (!this.compareStates(previousState, this.state)) {\n      this.addRandomTile();\n    }\n    this.updateScore();\n\n    switch (this.getStatus()) {\n      case 'lose':\n        this.gameOver();\n        break;\n      case 'win':\n        document.querySelector('.message-win').classList.remove('hidden');\n        break;\n    }\n  }\n\n  moveDown() {\n    const previousState = JSON.parse(JSON.stringify(this.state));\n\n    for (let col = 0; col < 4; col++) {\n      let row = 3;\n\n      for (let i = 2; i >= 0; i--) {\n        if (this.state[i][col] !== 0) {\n          for (let j = i; j < row; j++) {\n            if (this.state[j + 1][col] === 0) {\n              this.state[j + 1][col] = this.state[j][col];\n              this.state[j][col] = 0;\n            } else if (this.state[j + 1][col] === this.state[j][col]) {\n              this.state[j + 1][col] *= 2;\n              this.state[j][col] = 0;\n              this.score += this.state[j + 1][col];\n              row = j;\n              break;\n            } else {\n              row = j + 1;\n              break;\n            }\n          }\n        }\n      }\n    }\n    this.updateHTML();\n\n    if (!this.compareStates(previousState, this.state)) {\n      this.addRandomTile();\n    }\n    this.updateScore();\n\n    switch (this.getStatus()) {\n      case 'lose':\n        this.gameOver();\n        break;\n      case 'win':\n        document.querySelector('.message-win').classList.remove('hidden');\n        break;\n    }\n  }\n\n  compareStates(state1, state2) {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (state1[row][col] !== state2[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getStatus() {\n    // метод для перевірки можливості ходів нижче\n    const isAnyMovePossible = this.isAnyMovePossible();\n\n    // перевірка чи масив містить 2048\n    const hasWon = this.state.some((row) => row.includes(2048));\n\n    if (hasWon) {\n      return 'win';\n    } else if (!isAnyMovePossible) {\n      return 'lose';\n    } else {\n      return 'playing';\n    }\n  }\n\n  isAnyMovePossible() {\n    /* якщо є хоча б одне порожнє місце або є\n     сусідні плитки з однаковими числами, то є можливий хід */\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (\n          this.state[row][col] === 0 ||\n          (col < 3 && this.state[row][col] === this.state[row][col + 1]) ||\n          (row < 3 && this.state[row][col] === this.state[row + 1][col])\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  gameOver() {\n    document.querySelector('.message-lose').classList.remove('hidden');\n    isGameOver = true;\n  }\n\n  start() {\n    // створюєм копію початкового масиву, щоб працювати з нею в подальшому\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.updateHTML();\n\n    /* метод addRandomTile додає рандомну клітинку в пустому місці поля,\n    тому викликаєм його двічі для кнопки старт */\n    for (let i = 0; i < 2; i++) {\n      this.addRandomTile();\n    }\n  }\n\n  addRandomTile() {\n    let row, col;\n\n    do {\n      /* для колонок і рядків створюєм рандомне число між 0 і 3\n      (бо індекси в js поч з 0) і присвоюєм числа в масив стану */\n      row = Math.floor(Math.random() * 4);\n      col = Math.floor(Math.random() * 4);\n    } while (this.state[row][col] !== 0);\n\n    // 10% шансом може з'явитись 4:\n    this.state[row][col] = Math.random() < 0.1 ? 4 : 2;\n\n    // вибираєм клітинку в самому HTML\n    const cell = gameTable.rows[row].cells[col];\n\n    /* присвоюєм вміст клітинки згідно масиву, додаєм клас\n    (напр field-cell--2 щоб клітинки відрізнялись по кольору)\n    для кольору і для анімації появи */\n    cell.textContent = this.state[row][col];\n    cell.classList.add(`field-cell--${this.state[row][col]}`);\n    cell.classList.add('slide-in-down');\n\n    setTimeout(() => {\n      cell.classList.remove('slide-in-down');\n    }, 300); // час, відповідний тривалості переходу в CSS\n  }\n\n  updateHTML() {\n    /* метод для оновлення стану поля згідно числам в масиві state.\n    ітеруєм по всіх рядках і колонках поля */\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const cell = gameTable.rows[row].cells[col];\n\n        // якщо число в масиві 0, то і вміст клітинки буде пустий\n        cell.textContent = this.state[row][col] || '';\n\n        /* якщо число в масиві яке відповідає за дану клітинку 0,\n        то скидаєм клас до стандартного, щоб був колір пустої плитки,\n        якщо клітинка не пуста, до додаєм клас до неї (сам клас css -\n        таке ж число як в масиві, тому ними зручно маніпулювати) */\n        cell.className = 'field-cell';\n\n        if (this.state[row][col]) {\n          cell.classList.add(`field-cell--${this.state[row][col]}`);\n        }\n      }\n    }\n  }\n\n  updateScore() {\n    // оновлення очок відбувається при рухові поля, значення береться із об'єкта\n    const scores = document.querySelector('.game-score');\n\n    scores.textContent = this.score;\n  }\n}\n\nconst game = new Game();\n\nconst startBtn = document.querySelector('.start');\n\nstartBtn.addEventListener('click', () => {\n  /* при нажиманні на кнопку старт, викликаєм відповідний метод\n  з класу і перетворюєм кнопку на рестарт, скидаєм щотчик очок */\n  game.start();\n  startBtn.classList.remove('start');\n  startBtn.classList.add('restart');\n  startBtn.innerText = 'Restart';\n  game.score = 0;\n  game.updateScore();\n\n  // перезапуск гри якщо гравець програв\n  if (isGameOver) {\n    document.querySelector('.message-lose').classList.add('hidden');\n    isGameOver = false;\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  /* додаємо керування стрілками на клавіатурі.\n   запобігаєм стандартній поведінці клавіш */\n  if (!isGameOver) {\n    e.preventDefault();\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n  }\n});\n\n// додавання сенсорного керування\nlet startX, startY;\n\ndocument.addEventListener('touchstart', (e) => {\n  // зберігаємо координати початку дотику\n  startX = e.touches[0].clientX;\n  startY = e.touches[0].clientY;\n});\n\ndocument.addEventListener('touchend', (e) => {\n  // oбчислюємо різницю координат для визначення напрямку свайпу\n  const endX = e.changedTouches[0].clientX;\n  const endY = e.changedTouches[0].clientY;\n  const deltaX = endX - startX;\n  const deltaY = endY - startY;\n\n  // визначаємо напрямок свайпу\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\n    // горизонтальний свайп\n    if (deltaX > 0) {\n      game.moveRight();\n    } else {\n      game.moveLeft();\n    }\n  } else {\n    // вертикальний свайп\n    if (deltaY > 0) {\n      game.moveDown();\n    } else {\n      game.moveUp();\n    }\n  }\n});\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}